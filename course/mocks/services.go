// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/rpc/grpc_server.go
//
// Generated by this command:
//
//	mockgen -source=./api/rpc/grpc_server.go -destination=./mocks/grpc_server.go
//
// Package mock_api is a generated GoMock package.
package mock_api

import (
	model "course/model"
	util "course/util"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockcourseService is a mock of courseService interface.
type MockcourseService struct {
	ctrl     *gomock.Controller
	recorder *MockcourseServiceMockRecorder
}

// MockcourseServiceMockRecorder is the mock recorder for MockcourseService.
type MockcourseServiceMockRecorder struct {
	mock *MockcourseService
}

// NewMockcourseService creates a new mock instance.
func NewMockcourseService(ctrl *gomock.Controller) *MockcourseService {
	mock := &MockcourseService{ctrl: ctrl}
	mock.recorder = &MockcourseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcourseService) EXPECT() *MockcourseServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcourseService) Create(course model.Course, categoryIDs []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", course, categoryIDs)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockcourseServiceMockRecorder) Create(course, categoryIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcourseService)(nil).Create), course, categoryIDs)
}

// EnrollUser mocks base method.
func (m *MockcourseService) EnrollUser(enr model.Enrollment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrollUser", enr)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnrollUser indicates an expected call of EnrollUser.
func (mr *MockcourseServiceMockRecorder) EnrollUser(enr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrollUser", reflect.TypeOf((*MockcourseService)(nil).EnrollUser), enr)
}

// GetAll mocks base method.
func (m *MockcourseService) GetAll(pagination util.Pagination) []model.Course {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", pagination)
	ret0, _ := ret[0].([]model.Course)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockcourseServiceMockRecorder) GetAll(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockcourseService)(nil).GetAll), pagination)
}

// GetByID mocks base method.
func (m *MockcourseService) GetByID(id string) (model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockcourseServiceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockcourseService)(nil).GetByID), id)
}

// GetCourseIDsForUser mocks base method.
func (m *MockcourseService) GetCourseIDsForUser(userID string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseIDsForUser", userID)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetCourseIDsForUser indicates an expected call of GetCourseIDsForUser.
func (mr *MockcourseServiceMockRecorder) GetCourseIDsForUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseIDsForUser", reflect.TypeOf((*MockcourseService)(nil).GetCourseIDsForUser), userID)
}

// MockchapterService is a mock of chapterService interface.
type MockchapterService struct {
	ctrl     *gomock.Controller
	recorder *MockchapterServiceMockRecorder
}

// MockchapterServiceMockRecorder is the mock recorder for MockchapterService.
type MockchapterServiceMockRecorder struct {
	mock *MockchapterService
}

// NewMockchapterService creates a new mock instance.
func NewMockchapterService(ctrl *gomock.Controller) *MockchapterService {
	mock := &MockchapterService{ctrl: ctrl}
	mock.recorder = &MockchapterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchapterService) EXPECT() *MockchapterServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockchapterService) Create(chapter model.Chapter) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chapter)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockchapterServiceMockRecorder) Create(chapter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockchapterService)(nil).Create), chapter)
}

// GetByID mocks base method.
func (m *MockchapterService) GetByID(id string) (model.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(model.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockchapterServiceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockchapterService)(nil).GetByID), id)
}
