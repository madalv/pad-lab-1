// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: rec_svc.proto

package pb_rec

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecServiceClient is the client API for RecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecServiceClient interface {
	AddCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*empty.Empty, error)
}

type recServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecServiceClient(cc grpc.ClientConnInterface) RecServiceClient {
	return &recServiceClient{cc}
}

func (c *recServiceClient) AddCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.rec.RecService/AddCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecServiceServer is the server API for RecService service.
// All implementations must embed UnimplementedRecServiceServer
// for forward compatibility
type RecServiceServer interface {
	AddCourse(context.Context, *Course) (*empty.Empty, error)
	mustEmbedUnimplementedRecServiceServer()
}

// UnimplementedRecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecServiceServer struct {
}

func (UnimplementedRecServiceServer) AddCourse(context.Context, *Course) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourse not implemented")
}
func (UnimplementedRecServiceServer) mustEmbedUnimplementedRecServiceServer() {}

// UnsafeRecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecServiceServer will
// result in compilation errors.
type UnsafeRecServiceServer interface {
	mustEmbedUnimplementedRecServiceServer()
}

func RegisterRecServiceServer(s grpc.ServiceRegistrar, srv RecServiceServer) {
	s.RegisterService(&RecService_ServiceDesc, srv)
}

func _RecService_AddCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecServiceServer).AddCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rec.RecService/AddCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecServiceServer).AddCourse(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

// RecService_ServiceDesc is the grpc.ServiceDesc for RecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rec.RecService",
	HandlerType: (*RecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCourse",
			Handler:    _RecService_AddCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rec_svc.proto",
}
